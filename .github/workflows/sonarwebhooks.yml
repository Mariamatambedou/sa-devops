name: Build, Test, Push Docker Image, SonarQube Scan and Notification

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17

      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Notification de d√©marrage
      - name: Send Start Notification to Google Chat
        run: |
          curl -X POST \
          -H 'Content-Type: application/json' \
          -d '{"text": "üöÄ Le build a commenc√©. Initi√© par : '${{ github.actor }}'"}' \
          "${{ secrets.CHAT_WEBHOOK_URL }}"

      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONARQUBE_HOST }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: tambedou/buildpush-image:latest

      - name: Logout from Docker Hub
        run: docker logout

      # Notification de fin de pipeline avec ic√¥ne et statut
      - name: Send End Notification to Google Chat
        if: always()
        run: |
          STATUS_ICON=""
          if [ "${{ job.status }}" == 'success' ]; then
            STATUS_ICON="‚úÖ"
          elif [ "${{ job.status }}" == 'failure' ]; then
            STATUS_ICON="‚ùå"
          else
            STATUS_ICON="‚ö†Ô∏è"
          fi
          curl -X POST \
          -H 'Content-Type: application/json' \
          -d "{\"text\": \"${STATUS_ICON} Le build est termin√© avec le statut : ${{ job.status }}. Initi√© par : ${{ github.actor }}\"}" \
          "${{ secrets.CHAT_WEBHOOK_URL }}"
